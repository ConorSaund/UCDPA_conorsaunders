# -*- coding: utf-8 -*-
"""UCDPA_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xFto_sXUEg_QmXtBZkf76JycWEuPKyVj
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

url = 'https://raw.githubusercontent.com/ConorSaund/UCDPA_conorsaunders/main/Sleep_Efficiency.csv'
df = pd.read_csv(url)

df.head()

df.isnull().sum()

"""Definition of REM/ Deep Sleep/ Light Sleep

Visualisation
1.   Population distribution
2.   Number of smokers
3.   Smoking and sleep relationship
3.   Number of drinkers
4.   Drinking and sleep relationship
5.   Does number of wake ups affect type of sleep?
6.   Does the time of sleep affect the type of sleep?
"""

# Count the number of non-null values under the "Gender" header
gender_count = df['Gender'].count()

# Show the distribution of Male and Female
gender_distribution = df['Gender'].value_counts()

print("Number of non-null values under 'Gender' header: ", gender_count)
print("Distribution of Male and Female: ")
print(gender_distribution)

"""# 1. Visualise the population distrubution with respect to Gender"""

# Define the colors for the pie chart slices
colors = ['#82c1c5', '#be545e']

# Create a figure and set the background color
fig, ax = plt.subplots()
fig.set_facecolor('dimgray')

# Create a pie chart and set the color of the label text to white
_, _, autotexts = ax.pie(gender_distribution, labels=gender_distribution.index, colors=colors, autopct='%1.1f%%', textprops={'color': 'white'})

# Set the color of the text on the pie chart to white
for autotext in autotexts:
    autotext.set_color('white')

# Add a title and set the color to white
ax.set_title('Gender Distribution', color='white')

# Show the chart
plt.show()

"""# 1. Visualise the population with respect to Age"""

# Get the age data
age_data = df['Age']

# Create a figure with two subplots, one for the scatterplot and one for the boxplot
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))

# Create a scatterplot of age data
ax1.scatter(range(len(age_data)), age_data)
ax1.set_xlabel('Index')
ax1.set_ylabel('Age')
ax1.set_title('Age Scatterplot')

# Create a boxplot of age data
ax2.boxplot(age_data)
ax2.set_xticklabels(['Age'])
ax2.set_ylabel('Age')
ax2.set_title('Age Boxplot')

# Display the figure
plt.show()

"""# 2. Visualise the number of smokers"""

# Get the smoking status data
smoking_data = df['Smoking status']

# Count the number of smokers and non-smokers
smoker_count = (smoking_data == 'Yes').sum()
non_smoker_count = (smoking_data == 'No').sum()

# Create a bar chart of smoker counts
labels = ['Smokers', 'Non-Smokers']
counts = [smoker_count, non_smoker_count]
plt.bar(labels, counts)
plt.title('Number of Smokers')
plt.ylabel('Count')

# Display the chart
plt.show()

