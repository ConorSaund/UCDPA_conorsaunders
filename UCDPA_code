{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPwnbTsDla1K3jBR7Gb3xFP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ConorSaund/UCDPA_conorsaunders/blob/main/UCDPA_code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "bacSi1GTP32h"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/ConorSaund/UCDPA_conorsaunders/main/Sleep_Efficiency.csv'\n",
        "df = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "dBlOEOM2QTTs"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "xHt7bhTcQWl0",
        "outputId": "e2104e57-b7dc-446a-9232-95615cc22964"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ID  Age  Gender              Bedtime          Wakeup time  Sleep duration  \\\n",
              "0   1   65  Female  2021-03-06 01:00:00  2021-03-06 07:00:00             6.0   \n",
              "1   2   69    Male  2021-12-05 02:00:00  2021-12-05 09:00:00             7.0   \n",
              "2   3   40  Female  2021-05-25 21:30:00  2021-05-25 05:30:00             8.0   \n",
              "3   4   40  Female  2021-11-03 02:30:00  2021-11-03 08:30:00             6.0   \n",
              "4   5   57    Male  2021-03-13 01:00:00  2021-03-13 09:00:00             8.0   \n",
              "\n",
              "   Sleep efficiency  REM sleep percentage  Deep sleep percentage  \\\n",
              "0              0.88                    18                     70   \n",
              "1              0.66                    24                     28   \n",
              "2              0.89                    20                     70   \n",
              "3              0.51                    28                     25   \n",
              "4              0.76                    27                     55   \n",
              "\n",
              "   Light sleep percentage  Awakenings  Caffeine consumption  \\\n",
              "0                      10         0.0                   0.0   \n",
              "1                      53         3.0                   0.0   \n",
              "2                      10         1.0                   0.0   \n",
              "3                      52         3.0                  50.0   \n",
              "4                      18         3.0                   0.0   \n",
              "\n",
              "   Alcohol consumption Smoking status  Exercise frequency  \n",
              "0                  0.0            Yes                 3.0  \n",
              "1                  3.0            Yes                 3.0  \n",
              "2                  0.0             No                 3.0  \n",
              "3                  5.0            Yes                 1.0  \n",
              "4                  3.0             No                 3.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5ea4a26-863b-4f50-a525-01eb6ca99802\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Bedtime</th>\n",
              "      <th>Wakeup time</th>\n",
              "      <th>Sleep duration</th>\n",
              "      <th>Sleep efficiency</th>\n",
              "      <th>REM sleep percentage</th>\n",
              "      <th>Deep sleep percentage</th>\n",
              "      <th>Light sleep percentage</th>\n",
              "      <th>Awakenings</th>\n",
              "      <th>Caffeine consumption</th>\n",
              "      <th>Alcohol consumption</th>\n",
              "      <th>Smoking status</th>\n",
              "      <th>Exercise frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>65</td>\n",
              "      <td>Female</td>\n",
              "      <td>2021-03-06 01:00:00</td>\n",
              "      <td>2021-03-06 07:00:00</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.88</td>\n",
              "      <td>18</td>\n",
              "      <td>70</td>\n",
              "      <td>10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>69</td>\n",
              "      <td>Male</td>\n",
              "      <td>2021-12-05 02:00:00</td>\n",
              "      <td>2021-12-05 09:00:00</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.66</td>\n",
              "      <td>24</td>\n",
              "      <td>28</td>\n",
              "      <td>53</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>40</td>\n",
              "      <td>Female</td>\n",
              "      <td>2021-05-25 21:30:00</td>\n",
              "      <td>2021-05-25 05:30:00</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.89</td>\n",
              "      <td>20</td>\n",
              "      <td>70</td>\n",
              "      <td>10</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>40</td>\n",
              "      <td>Female</td>\n",
              "      <td>2021-11-03 02:30:00</td>\n",
              "      <td>2021-11-03 08:30:00</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.51</td>\n",
              "      <td>28</td>\n",
              "      <td>25</td>\n",
              "      <td>52</td>\n",
              "      <td>3.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>57</td>\n",
              "      <td>Male</td>\n",
              "      <td>2021-03-13 01:00:00</td>\n",
              "      <td>2021-03-13 09:00:00</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.76</td>\n",
              "      <td>27</td>\n",
              "      <td>55</td>\n",
              "      <td>18</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5ea4a26-863b-4f50-a525-01eb6ca99802')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a5ea4a26-863b-4f50-a525-01eb6ca99802 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a5ea4a26-863b-4f50-a525-01eb6ca99802');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NirZXMOrRg7_",
        "outputId": "a5f0eec5-9208-4bb2-9be6-3b9512dabfad"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ID                         0\n",
              "Age                        0\n",
              "Gender                     0\n",
              "Bedtime                    0\n",
              "Wakeup time                0\n",
              "Sleep duration             0\n",
              "Sleep efficiency           0\n",
              "REM sleep percentage       0\n",
              "Deep sleep percentage      0\n",
              "Light sleep percentage     0\n",
              "Awakenings                20\n",
              "Caffeine consumption      25\n",
              "Alcohol consumption       16\n",
              "Smoking status             0\n",
              "Exercise frequency         6\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Definition of REM/ Deep Sleep/ Light Sleep"
      ],
      "metadata": {
        "id": "rGl8j0caSouT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualisation\n",
        "1.   Population distribution\n",
        "2.   Number of smokers\n",
        "3.   Smoking and sleep relationship\n",
        "3.   Number of drinkers\n",
        "4.   Drinking and sleep relationship\n",
        "5.   Does number of wake ups affect type of sleep?\n",
        "6.   Does the time of sleep affect the type of sleep?\n",
        "\n"
      ],
      "metadata": {
        "id": "TYbvBxLoS8Mf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of non-null values under the \"Gender\" header\n",
        "gender_count = df['Gender'].count()\n",
        "\n",
        "# Show the distribution of Male and Female\n",
        "gender_distribution = df['Gender'].value_counts()\n",
        "\n",
        "print(\"Number of non-null values under 'Gender' header: \", gender_count)\n",
        "print(\"Distribution of Male and Female: \")\n",
        "print(gender_distribution)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yW3qY8zmW1LF",
        "outputId": "1f783fb2-056a-41c3-a8ce-8bd58b998f79"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of non-null values under 'Gender' header:  452\n",
            "Distribution of Male and Female: \n",
            "Male      228\n",
            "Female    224\n",
            "Name: Gender, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Visualise the population distrubution with respect to Gender"
      ],
      "metadata": {
        "id": "bVHRDZPpZzcZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the colors for the pie chart slices\n",
        "colors = ['#82c1c5', '#be545e']\n",
        "\n",
        "# Create a figure and set the background color\n",
        "fig, ax = plt.subplots()\n",
        "fig.set_facecolor('dimgray')\n",
        "\n",
        "# Create a pie chart and set the color of the label text to white\n",
        "_, _, autotexts = ax.pie(gender_distribution, labels=gender_distribution.index, colors=colors, autopct='%1.1f%%', textprops={'color': 'white'})\n",
        "\n",
        "# Set the color of the text on the pie chart to white\n",
        "for autotext in autotexts:\n",
        "    autotext.set_color('white')\n",
        "\n",
        "# Add a title and set the color to white\n",
        "ax.set_title('Gender Distribution', color='white')\n",
        "\n",
        "# Show the chart\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "id": "azAW5o2eXGs6",
        "outputId": "3e19d642-32b4-45da-a0ff-29776be786b9"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Visualise the population with respect to Age"
      ],
      "metadata": {
        "id": "DiLr0Ls9aEFt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the age data\n",
        "age_data = df['Age']\n",
        "\n",
        "# Create a figure with two subplots, one for the scatterplot and one for the boxplot\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n",
        "\n",
        "# Create a scatterplot of age data\n",
        "ax1.scatter(range(len(age_data)), age_data)\n",
        "ax1.set_xlabel('Index')\n",
        "ax1.set_ylabel('Age')\n",
        "ax1.set_title('Age Scatterplot')\n",
        "\n",
        "# Create a boxplot of age data\n",
        "ax2.boxplot(age_data)\n",
        "ax2.set_xticklabels(['Age'])\n",
        "ax2.set_ylabel('Age')\n",
        "ax2.set_title('Age Boxplot')\n",
        "\n",
        "# Display the figure\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "QCl0cfX9XIJp",
        "outputId": "fba5c67c-ca0e-4c1e-fb0b-c8476ca658a5"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Visualise the number of smokers"
      ],
      "metadata": {
        "id": "2--eKe5ocacB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the smoking status data\n",
        "smoking_data = df['Smoking status']\n",
        "\n",
        "# Count the number of smokers and non-smokers\n",
        "smoker_count = (smoking_data == 'Yes').sum()\n",
        "non_smoker_count = (smoking_data == 'No').sum()\n",
        "\n",
        "# Create a bar chart of smoker counts\n",
        "labels = ['Smokers', 'Non-Smokers']\n",
        "counts = [smoker_count, non_smoker_count]\n",
        "plt.bar(labels, counts)\n",
        "plt.title('Number of Smokers')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Display the chart\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "ppyYlThQcfar",
        "outputId": "287ccf1e-fedd-4a3c-d97a-e978fca30c8d"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4vgXoJ-ncq6L"
      },
      "execution_count": 49,
      "outputs": []
    }
  ]
}